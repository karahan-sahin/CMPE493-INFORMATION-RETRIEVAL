# Link Analysis (Cont)



### Exercise

![image-20201218171043450](../../../AppData/Roaming/Typora/typora-user-images/image-20201218171043450.png)

- Assume t = 0.5 for teleportation Teleportation rate P(t) * P(next random link)

#### Transition Probability Matrix (With Teleportation)

| A                   | B                 | C                   |
| ------------------- | ----------------- | ------------------- |
| **0.5 * 1/3 = 1/6** | **1/6** + 1 * 0.5 | **0.5 * 1/3 = 1/6** |
| 0.5 * 0.5 + 1/6     | **1/6**           | 0.5 * 0.5 + 1/6     |
| **0.5 * 1/3 = 1/6** | 1/6 + 1 * 0.5     | **0.5 * 1/3 = 1/6** |

- Bold: Teleportation
- Normal: Random walk

### Probability Vectors

- Now: How to compute PageRank
- A probability (row) vector **x**: [x~1~,..... x~N~] tells us where the walk is at any point
  - Example: [000....1.....000] mean, we are in state i
  -                  1         i          n  

* More generally, the vector **x** = [x~1~,..... x~N~] means the walk is in state *i* with probability x~i~

$$
\sum_{i=1}^{n}\chi_{i} = 1
$$



#### Change in probability vector

- If the probability vector is **x** = [x~1~,..... x~N~] at this step, what is it at the next step?
- Recall that ==row *i* of the **transition probability Matrix P** tells us where we go next from state *i* .==
- So from **x**, our next state is distributed as **xP**.

#### Example

- For given pages: [x~1~, x~2~, x~3~] is the probability vector of the current step

- The probability transition matrix as follows

  - [  p11  p12  p13  ]

    [  p21  p22  p23 ]

    [  p31  p32  p33 ]

- x * P =

  - [ ( (x~1~ * p11) + (x~2~ * p21) + (x~3~ * p31) ), 

      ( (x~1~ * p12) + (x~2~ * p22) + (x~3~ * p32) ), 

      ( (x~1~ * p13) + (x~2~ * p23) + (x~3~ * p33) )   ]

### How do we compute this vector?

- Let **a** = [a~1~,  .... a~n~] denote the row vector of steady-state probabilities
- ==If our current position is described by **a**, then the next step distributed as **aP**==
- But **a** is the steady state, so **a** = **aP**
- Solving this matrix equation gives us **a**
  - So **a** is the (left) eigenvector for **P**
  - (Corresponds to the "principal" eigenvector of **P** with the largest eigenvalue)
  - Transition probability matrices always have largest eigenvalue 1

### Power Iteration Method

- Recall, regardless of where we start, we eventually reach the steady state **a**
- ==Start with any distribution (say x=[10....0])==
- After one step, we're at xP;
- ==After two steps at xP^2^, then xP^3^ and so on.==
- "Eventually" means for "large" k, xP^k^ = a
- Algorithm:
  - ==Multiply x by increasing powers of P until the product looks stable==

![image-20201218223945726](../../../AppData/Roaming/Typora/typora-user-images/image-20201218223945726.png)



### PageRank Summary

- Preprocessing
  - Given graph of links, build matrix P
  - Apply teleportation
  - From modified matrix, compute $\vec{a}$ 
  - $a_{i}$ is the PageRank of page *i*
- Query processing
  - Retrieve pages satisfying the query
  - Rank them by their PageRank (or a combination of PageRank, match score etc.)
  - Return ranked list to the user

PageRank Issues

- Real surfers are not random surfers
  - Examples of non-random surfing: back button, bookmarks, directories -- and search!
  - Markov model is not a good model of surfing
  - But it's good enough as a model for our purposes.
- Simple PageRank ranking produces bad results for many pages

![image-20201218225005278](../../../AppData/Roaming/Typora/typora-user-images/image-20201218225005278.png)



## Hyperlink-Induced Topic Search (HITS)

- HITS is query-specific
- In response to a query, instead of an ordered list of pages each meeting the query, find <u>two</u> sets of inter-related pages:
  - Hub pages are good lists of links on a subject
    - Example: "Bob's list of cancer-related links"
  - Authority pages occur recurrently on good hubs for the subject
- HITS is now used by Ask.com and Teoma.com

### Hubs and Authorities 

- Thus, a good hub page for a topic *points* to many authoritative pages for that topic
- ==A good authority page for a topic is pointed to by many good hubs for that topic.==
- **Circular definition** - will turn this into an **iterative computation**.

### High-level scheme

- Extract from the web a <u>base set</u> of pages that *could* be good hubs or authorities.
- From these, identify a small set of top hub and authority pages:
  - iterative algorithm

### Base Set

- Given text query (say **airline**), use a text index to get all pages containing **airline**
  - Call this the root set of pages.
- ==Add in any page that either==
  - points to a page in the root set, or
  - is pointed to by a page in the root set
- Call this the **base set**

![image-20201218231713019](../../../AppData/Roaming/Typora/typora-user-images/image-20201218231713019.png)