Covid-19 dataset

- 50 topics and query
  - 30 for build
  - 20 for testing
- Relevance judgements
  - Topic
  - Not relevant
  - ID
  - Relevancy score
- No userface is needed (Maybe)
- Main thing is mean average time

#### Edit distance to all dictionary terms?

- Given a (mis-spelled) query - do we compute its edit distance to every dictionary term
  - Expensive and slow
  - Alternative
- How do we cut the set of candidate dictionary terms?
  - One possibility is to use n-gram overlap this
  - This is also be used by itself for spelling correction
- ==Alternative is to **generate everything up to edit distance k** then **intersect**==
  - k=2 is generally enough(Norvig)

### n-gram overlap

- Enumerate all the n-grams in the query string as well as in the lexicon
- Use the n-gram index(recall wild card search) to retrieve all lexicon terms matching any of the query n-grams
- Threshold by number of matching n-grams
  - Variants -- weight by keyboard layout, etc.

Example with trigrams

- Suppose the text is **november**
  - Trigrams are [nov, ove, vem, ==**emb, mbe, ber**==]
- The query is **december**
  - Trigrams are [dec, ece, cem, ==**emb, mbe, ber**==]
- |3| / |9| =

- So 3 trigrams overlap (of 6 in each term)
- How can we turn this into a normalized measure of overlap?

One Option - Jaccard Coefficient

- A commonly-used measure of overlap
- ==Let X and Y be two sets; then the J.C  is== $|X \cap Y| / |X \cup Y| $

- Equals **1 when X and Y have the same elements** and **zero when they are disjoint**
- X and Y don't have to be of the same size
- **Always assigns a number between 0 and 1**
  - Now threshold to decide if you have a match
  - E.g if J.C > 0.8, declare a match 
- Used to determine set similarity



Context sensitive Spelling Correction

- Need surrounding context to catch this

- First idea: retrieve dictionary terms close (e.g. in weighted edit distance) to each query term

  - Now try all possible resulting phrases

    > flew form Istanbul Airport
    >
    > fled form Istanbul Airport
    >
    > flea form Istanbul Airport
    >
    > .....

- Hit-based spelling correction: Suggest the alternative thar

Soundex Algorithm

* Class of heuristics to expand a query into *phonetic* equivalents (rather than orthographic)
  * Language specific -- mainly for names
  * E.g chebyshev --> tchebycheff
* Turn every token to be indexed into a 4-character reduced form
* Do the same with query terms
* Build and search an index on reduced forms
  * (when the query calls for a soundex match)

Typical Algorithm

1. Retain the first letter of the word
2. Change all occurrences of the following letters to 0: A,E,I,O,U,H,W,Y
3. Change letters to digits as follows:
   - 